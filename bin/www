var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

// 从环境获取港口并快速储存。
// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3004');
app.set('port', port);

// 创建 HTTP 服务
var server = http.createServer(app);

// 监听所有网络接口上提供的端口。
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// 将端口规范化为数字、字符串或false。
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

// 监听HTTP服务器的“错误”事件。
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // 用友好的消息处理特定的侦听错误
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// 用于HTTP服务器“监听”事件。
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
